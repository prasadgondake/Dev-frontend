{"ast":null,"code":"import { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from '../actions/types';\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n  switch (type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: payload,\n        loading: false\n      };\n    case GET_POST:\n      return {\n        ...state,\n        post: payload,\n        loading: false\n      };\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false\n      };\n    case UPDATE_LIKES:\n      return {\n        ...state,\n        posts: state.posts.map(post => post._id === payload.id ? {\n          ...post,\n          likes: payload.likes\n        } : post),\n        loading: false\n      };\n    case ADD_COMMENT:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: payload\n        },\n        loading: false\n      };\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: state.post.comments.filter(comment => comment._id !== payload)\n        },\n        loading: false\n      };\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","posts","post","loading","error","state","action","type","payload","filter","_id","map","id","likes","comments","comment"],"sources":["F:/Projects/DevConnector/frontend/src/reducers/post.js"],"sourcesContent":["import {\r\n    GET_POSTS,\r\n    POST_ERROR,\r\n    UPDATE_LIKES,\r\n    DELETE_POST,\r\n    ADD_POST,\r\n    GET_POST,\r\n    ADD_COMMENT,\r\n    REMOVE_COMMENT\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    posts: [],\r\n    post: null,\r\n    loading: true,\r\n    error: {}\r\n}\r\n\r\nexport default function(state = initialState , action){\r\n    const { type , payload }=action;\r\n\r\n    switch(type){\r\n        case GET_POSTS:\r\n            return{\r\n                ...state,\r\n                posts: payload,\r\n                loading: false\r\n            };\r\n        case GET_POST:\r\n            return{\r\n                ...state,\r\n                post: payload,\r\n                loading: false\r\n            };\r\n        case ADD_POST:\r\n            return{\r\n                ...state,\r\n                posts: [payload , ...state.posts],\r\n                loading: false\r\n            };\r\n        case DELETE_POST:\r\n            return{\r\n                ...state,\r\n                posts: state.posts.filter(post=>post._id !== payload),\r\n                loading: false\r\n            };\r\n        case POST_ERROR:\r\n            return{\r\n                ...state,\r\n                error: payload,\r\n                loading: false\r\n            };\r\n        case UPDATE_LIKES:\r\n            return{\r\n                ...state,\r\n                posts: state.posts.map(post=> post._id === payload.id ? {...post , likes: payload.likes } : post),\r\n                loading: false\r\n            };\r\n        case ADD_COMMENT:\r\n            return{\r\n                ...state,\r\n                post: { ...state.post , comments: payload},\r\n                loading: false\r\n            };\r\n        case REMOVE_COMMENT:\r\n            return{\r\n                ...state,\r\n                post: {\r\n                    ...state.post,\r\n                    comments: state.post.comments.filter(\r\n                        comment=> comment._id !== payload)\r\n                },\r\n                loading: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}"],"mappings":"AAAA,SACIA,SAAS,EACTC,UAAU,EACVC,YAAY,EACZC,WAAW,EACXC,QAAQ,EACRC,QAAQ,EACRC,WAAW,EACXC,cAAc,QACX,kBAAkB;AAEzB,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE,CAAC;AACZ,CAAC;AAED,eAAe,UAASC,KAAK,GAAGL,YAAY,EAAGM,MAAM,EAAC;EAClD,MAAM;IAAEC,IAAI;IAAGC;EAAQ,CAAC,GAACF,MAAM;EAE/B,QAAOC,IAAI;IACP,KAAKf,SAAS;MACV,OAAM;QACF,GAAGa,KAAK;QACRJ,KAAK,EAAEO,OAAO;QACdL,OAAO,EAAE;MACb,CAAC;IACL,KAAKN,QAAQ;MACT,OAAM;QACF,GAAGQ,KAAK;QACRH,IAAI,EAAEM,OAAO;QACbL,OAAO,EAAE;MACb,CAAC;IACL,KAAKP,QAAQ;MACT,OAAM;QACF,GAAGS,KAAK;QACRJ,KAAK,EAAE,CAACO,OAAO,EAAG,GAAGH,KAAK,CAACJ,KAAK,CAAC;QACjCE,OAAO,EAAE;MACb,CAAC;IACL,KAAKR,WAAW;MACZ,OAAM;QACF,GAAGU,KAAK;QACRJ,KAAK,EAAEI,KAAK,CAACJ,KAAK,CAACQ,MAAM,CAACP,IAAI,IAAEA,IAAI,CAACQ,GAAG,KAAKF,OAAO,CAAC;QACrDL,OAAO,EAAE;MACb,CAAC;IACL,KAAKV,UAAU;MACX,OAAM;QACF,GAAGY,KAAK;QACRD,KAAK,EAAEI,OAAO;QACdL,OAAO,EAAE;MACb,CAAC;IACL,KAAKT,YAAY;MACb,OAAM;QACF,GAAGW,KAAK;QACRJ,KAAK,EAAEI,KAAK,CAACJ,KAAK,CAACU,GAAG,CAACT,IAAI,IAAGA,IAAI,CAACQ,GAAG,KAAKF,OAAO,CAACI,EAAE,GAAG;UAAC,GAAGV,IAAI;UAAGW,KAAK,EAAEL,OAAO,CAACK;QAAM,CAAC,GAAGX,IAAI,CAAC;QACjGC,OAAO,EAAE;MACb,CAAC;IACL,KAAKL,WAAW;MACZ,OAAM;QACF,GAAGO,KAAK;QACRH,IAAI,EAAE;UAAE,GAAGG,KAAK,CAACH,IAAI;UAAGY,QAAQ,EAAEN;QAAO,CAAC;QAC1CL,OAAO,EAAE;MACb,CAAC;IACL,KAAKJ,cAAc;MACf,OAAM;QACF,GAAGM,KAAK;QACRH,IAAI,EAAE;UACF,GAAGG,KAAK,CAACH,IAAI;UACbY,QAAQ,EAAET,KAAK,CAACH,IAAI,CAACY,QAAQ,CAACL,MAAM,CAChCM,OAAO,IAAGA,OAAO,CAACL,GAAG,KAAKF,OAAO;QACzC,CAAC;QACDL,OAAO,EAAE;MACb,CAAC;IACL;MACI,OAAOE,KAAK;EAAC;AAEzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}